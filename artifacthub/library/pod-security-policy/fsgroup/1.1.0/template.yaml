apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: k8spspfsgroup
  annotations:
    metadata.gatekeeper.sh/title: "FS Group"
    metadata.gatekeeper.sh/version: 1.1.0
    description: >-
      Controls allocating an FSGroup that owns the Pod's volumes. Corresponds
      to the `fsGroup` field in a PodSecurityPolicy. For more information, see
      https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems
spec:
  crd:
    spec:
      names:
        kind: K8sPSPFSGroup
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          description: >-
            Controls allocating an FSGroup that owns the Pod's volumes. Corresponds
            to the `fsGroup` field in a PodSecurityPolicy. For more information, see
            https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems
          properties:
            rule:
              description: "An FSGroup rule name."
              enum:
                - MayRunAs
                - MustRunAs
                - RunAsAny
              type: string
            ranges:
              type: array
              description: "GID ranges affected by the rule."
              items:
                type: object
                properties:
                  min:
                    description: "The minimum GID in the range, inclusive."
                    type: integer
                  max:
                    description: "The maximum GID in the range, inclusive."
                    type: integer
  targets:
    - target: admission.k8s.gatekeeper.sh
      code:
      - engine: K8sNativeValidation
        source:
          variables:
          - name: isUpdate
            expression: has(request.operation) && request.operation == "UPDATE"
          - name: fsGroup
            expression: '!has(variables.anyObject.spec.securityContext) ? "" : !has(variables.anyObject.spec.securityContext.fsGroup) ? "" : variables.anyObject.spec.securityContext.fsGroup'
          - name: ruleString
            expression: |
              !has(variables.params.rule) ? "unspecified" : string(variables.params.rule)
          - name: rangesString
            expression: |
              !has(variables.params.ranges) ? "unspecified" : size(variables.params.ranges) == 0 ? "empty" : variables.params.ranges.map(r, string(r)).join(", ")
          - name: input_fsGroup_allowed
            expression: |
              !has(variables.params.rule) ? true : variables.params.rule == "RunAsAny" ? true : variables.params.rule == "MayRunAs" && variables.fsGroup == "" ? true : (variables.params.rule == "MayRunAs" || variables.params.rule == "MustRunAs") && has(variables.params.ranges) && size(variables.params.ranges) > 0 ? variables.params.ranges.exists(range, range.min <= variables.fsGroup && range.max >= variables.fsGroup) : false
          validations:
          - expression: 'variables.isUpdate || variables.input_fsGroup_allowed'
            messageExpression: '"The provided pod spec fsGroup is not allowed, pod: " + variables.anyObject.metadata.name + ". Allowed fsGroup rule: " + variables.ruleString + ", allowed fsGroup ranges: " + variables.rangesString'
      - engine: Rego
        source:
          rego: |
            package k8spspfsgroup

            import data.lib.exclude_update.is_update

            violation[{"msg": msg, "details": {}}] {
                # spec.securityContext.fsGroup field is immutable.
                not is_update(input.review)
                has_field(input.parameters, "rule")
                spec := input.review.object.spec
                not input_fsGroup_allowed(spec)
                msg := sprintf("The provided pod spec fsGroup is not allowed, pod: %v. Allowed fsGroup: %v", [input.review.object.metadata.name, input.parameters])
            }

            input_fsGroup_allowed(_) {
                # RunAsAny - No range is required. Allows any fsGroup ID to be specified.
                input.parameters.rule == "RunAsAny"
            }
            input_fsGroup_allowed(spec) {
                # MustRunAs - Validates pod spec fsgroup against all ranges
                input.parameters.rule == "MustRunAs"
                fg := spec.securityContext.fsGroup
                count(input.parameters.ranges) > 0
                range := input.parameters.ranges[_]
                value_within_range(range, fg)
            }
            input_fsGroup_allowed(spec) {
                # MayRunAs - Validates pod spec fsgroup against all ranges or allow pod spec fsgroup to be left unset
                input.parameters.rule == "MayRunAs"
                not has_field(spec, "securityContext")
            }
            input_fsGroup_allowed(spec) {
                # MayRunAs - Validates pod spec fsgroup against all ranges or allow pod spec fsgroup to be left unset
                input.parameters.rule == "MayRunAs"
                not spec.securityContext.fsGroup
            }
            input_fsGroup_allowed(spec) {
                # MayRunAs - Validates pod spec fsgroup against all ranges or allow pod spec fsgroup to be left unset
                input.parameters.rule == "MayRunAs"
                fg := spec.securityContext.fsGroup
                count(input.parameters.ranges) > 0
                range := input.parameters.ranges[_]
                value_within_range(range, fg)
            }
            value_within_range(range, value) {
                range.min <= value
                range.max >= value
            }
            # has_field returns whether an object has a field
            has_field(object, field) = true {
                object[field]
            }
          libs:
            - |
              package lib.exclude_update

              is_update(review) {
                  review.operation == "UPDATE"
              }
