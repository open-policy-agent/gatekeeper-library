apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8spspseccomp
  annotations:
    description: >-
      Controls the seccomp profile used by containers. Corresponds to the
      `seccomp.security.alpha.kubernetes.io/allowedProfileNames` annotation on
      a PodSecurityPolicy. For more information, see
      https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp
spec:
  crd:
    spec:
      names:
        kind: K8sPSPSeccomp
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          description: >-
            Controls the seccomp profile used by containers. Corresponds to the
            `seccomp.security.alpha.kubernetes.io/allowedProfileNames` annotation on
            a PodSecurityPolicy. For more information, see
            https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp
          properties:
            exemptImages:
              description: >-
                Any container that uses an image that matches an entry in this list will be excluded
                from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.

                It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name)
                in order to avoid unexpectedly exempting images from an untrusted repository.
              type: array
              items:
                type: string
            allowedProfiles:
              type: array
              description: "An array of allowed profile values for seccomp annotations on Pods."
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spspseccomp

        import data.lib.exempt_container.is_exempt

        container_annotation_key_prefix = "container.seccomp.security.alpha.kubernetes.io/"

        pod_annotation_key = "seccomp.security.alpha.kubernetes.io/pod"

        violation[{"msg": msg}] {
        	not input_wildcard_allowed
        	container := input_containers[name]
        	not is_exempt(container)
        	result := get_profile(container)
        	not allowed_profile(result.profile)
        	msg := sprintf("Seccomp profile '%v' is not allowed for container '%v'. Found at: %v. Allowed profiles: %v", [result.profile, name, result.location, input.parameters.allowedProfiles])
        }

        input_wildcard_allowed {
        	input.parameters.allowedProfiles[_] == "*"
        }

        allowed_profile(profile) {
        	profile == input.parameters.allowedProfiles[_]
        }

        # Container profile as defined in pod annotation
        get_profile(container) = {"profile": profile, "location": location} {
        	not has_securitycontext_container(container)
        	not has_annotation(get_container_annotation_key(container.name))
        	profile := input.review.object.metadata.annotations[pod_annotation_key]
        	location := sprintf("annotation %v", [pod_annotation_key])
        }

        # Container profile as defined in container annotation
        get_profile(container) = {"profile": profile, "location": location} {
        	container_annotation := get_container_annotation_key(container.name)
        	has_annotation(container_annotation)
        	profile := input.review.object.metadata.annotations[container_annotation]
        	location := sprintf("annotation %v", [container_annotation])
        }

        # Container profile as defined in pods securityContext
        get_profile(container) = {"profile": profile, "location": location} {
        	not has_securitycontext_container(container)
        	not has_annotation(get_container_annotation_key(container.name))
        	not has_annotation(pod_annotation_key)
        	profile := input.review.object.spec.securityContext.seccompProfile.type
        	location := "pod securityContext"
        }

        # Container profile as defined in containers securityContext
        get_profile(container) = {"profile": profile, "location": location} {
        	not has_annotation(get_container_annotation_key(container.name))
        	has_securitycontext_container(container)
        	profile := container.securityContext.seccompProfile.type
        	location := "container securityContext"
        }

        # Container profile missing
        get_profile(container) = {"profile": "not configured", "location": "no explicit profile found"} {
        	not has_annotation(get_container_annotation_key(container.name))
        	not has_annotation(pod_annotation_key)
        	not has_securitycontext_pod
        	not has_securitycontext_container(container)
        }

        has_annotation(annotation) {
        	input.review.object.metadata.annotations[annotation]
        }

        has_securitycontext_pod {
        	input.review.object.spec.securityContext.seccompProfile
        }

        has_securitycontext_container(container) {
        	container.securityContext.seccompProfile
        }

        get_container_annotation_key(name) = annotation {
        	annotation := concat("", [container_annotation_key_prefix, name])
        }

        input_containers[container.name] = container {
        	container := input.review.object.spec.containers[_]
        }

        input_containers[container.name] = container {
        	container := input.review.object.spec.initContainers[_]
        }
      libs:
        - |
          package lib.exempt_container

          is_exempt(container) {
              exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
              img := container.image
              exemption := exempt_images[_]
              _matches_exemption(img, exemption)
          }

          _matches_exemption(img, exemption) {
              not endswith(exemption, "*")
              exemption == img
          }

          _matches_exemption(img, exemption) {
              endswith(exemption, "*")
              prefix := trim_suffix(exemption, "*")
              startswith(img, prefix)
          }
