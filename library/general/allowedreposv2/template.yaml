apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: k8sallowedreposv2
  annotations:
    metadata.gatekeeper.sh/title: "Allowed Images"
    metadata.gatekeeper.sh/version: 1.0.0
    description: >-
      This policy enforces that container images must begin with a string from a specified list.
      The updated version, K8sAllowedReposv2, introduces support for exact match and glob-like syntax to enhance security:
      1. Exact Match: By default, if the * character is not specified, the policy strictly checks for an exact match of the full registry, repository, and/or the image name.
      2. Glob-like Syntax: Adding * at the end of a prefix allows prefix-based matching (e.g., registry.example.com/project/*). Only the * wildcard at the end of a string is supported.
      3. Security Note: To avoid bypasses scenarios, ensure prefixes include a trailing / where appropriate (e.g., registry.example.com/project/*).
spec:
  crd:
    spec:
      names:
        kind: K8sAllowedReposv2
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          properties:
            allowedImages:
              description: A list of allowed container image prefixes. Supports exact matches and prefixes ending with '*'.
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sallowedreposv2

        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not image_matches(container.image, input.parameters.allowedImages)
          msg := sprintf("container <%v> has an invalid image <%v>, allowed images are %v", [container.name, container.image, input.parameters.allowedImages])
        }

        violation[{"msg": msg}] {
          container := input.review.object.spec.initContainers[_]
          not image_matches(container.image, input.parameters.allowedImages)
          msg := sprintf("initContainer <%v> has an invalid image <%v>, allowed images are %v", [container.name, container.image, input.parameters.allowedImages])
        }

        violation[{"msg": msg}] {
          container := input.review.object.spec.ephemeralContainers[_]
          not image_matches(container.image, input.parameters.allowedImages)
          msg := sprintf("ephemeralContainer <%v> has an invalid image <%v>, allowed images are %v", [container.name, container.image, input.parameters.allowedImages])
        }

        image_matches(image, images) {
          i_image := images[_]  # Iterate through all images in the allowed list
          not endswith(i_image, "*")  # Check for exact match if the image does not end with *
          i_image == image
        }

        image_matches(image, images) {
          i_image := images[_]  # Iterate through all images in the allowed list
          endswith(i_image, "*")  # Check for prefix match if the image ends with *
          prefix := trim_suffix(i_image, "*")
          startswith(image, prefix)
        }
