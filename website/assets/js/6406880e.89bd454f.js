"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6796],{8376:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var a=i(5893),t=i(1151);const s={id:"allow-privilege-escalation",title:"Allow Privilege Escalation in Container"},l="Allow Privilege Escalation in Container",r={id:"validation/allow-privilege-escalation",title:"Allow Privilege Escalation in Container",description:"Description",source:"@site/docs/validation/allow-privilege-escalation.md",sourceDirName:"validation",slug:"/validation/allow-privilege-escalation",permalink:"/gatekeeper-library/website/validation/allow-privilege-escalation",draft:!1,unlisted:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper-library/edit/master/website/docs/validation/allow-privilege-escalation.md",tags:[],version:"current",frontMatter:{id:"allow-privilege-escalation",title:"Allow Privilege Escalation in Container"},sidebar:"docs",previous:{title:"Introduction",permalink:"/gatekeeper-library/website/pspintro"},next:{title:"App Armor",permalink:"/gatekeeper-library/website/validation/apparmor"}},o={},c=[{value:"Description",id:"description",level:2},{value:"Template",id:"template",level:2},{value:"Usage",id:"usage",level:3},{value:"Examples",id:"examples",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.a)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"allow-privilege-escalation-in-container",children:"Allow Privilege Escalation in Container"}),"\n",(0,a.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,a.jsxs)(n.p,{children:["Controls restricting escalation to root privileges. Corresponds to the ",(0,a.jsx)(n.code,{children:"allowPrivilegeEscalation"})," field in a PodSecurityPolicy. For more information, see ",(0,a.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation",children:"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation"})]}),"\n",(0,a.jsx)(n.h2,{id:"template",children:"Template"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8spspallowprivilegeescalationcontainer\n  annotations:\n    metadata.gatekeeper.sh/title: "Allow Privilege Escalation in Container"\n    metadata.gatekeeper.sh/version: 1.1.0\n    description: >-\n      Controls restricting escalation to root privileges. Corresponds to the\n      `allowPrivilegeEscalation` field in a PodSecurityPolicy. For more\n      information, see\n      https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sPSPAllowPrivilegeEscalationContainer\n      validation:\n        openAPIV3Schema:\n          type: object\n          description: >-\n            Controls restricting escalation to root privileges. Corresponds to the\n            `allowPrivilegeEscalation` field in a PodSecurityPolicy. For more\n            information, see\n            https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation\n          properties:\n            exemptImages:\n              description: >-\n                Any container that uses an image that matches an entry in this list will be excluded\n                from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.\n\n                It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name)\n                in order to avoid unexpectedly exempting images from an untrusted repository.\n              type: array\n              items:\n                type: string\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      code:\n      - engine: K8sNativeValidation\n        source:\n          variables:\n          - name: containers\n            expression: \'has(variables.anyObject.spec.containers) ? variables.anyObject.spec.containers : []\'\n          - name: initContainers\n            expression: \'has(variables.anyObject.spec.initContainers) ? variables.anyObject.spec.initContainers : []\'\n          - name: ephemeralContainers\n            expression: \'has(variables.anyObject.spec.ephemeralContainers) ? variables.anyObject.spec.ephemeralContainers : []\'\n          - name: exemptImagePrefixes\n            expression: |\n              !has(variables.params.exemptImages) ? [] :\n                variables.params.exemptImages.filter(image, image.endsWith("*")).map(image, string(image).replace("*", ""))\n          - name: exemptImageExplicit\n            expression: |\n              !has(variables.params.exemptImages) ? [] : \n                variables.params.exemptImages.filter(image, !image.endsWith("*"))\n          - name: exemptImages\n            expression: |\n              (variables.containers + variables.initContainers + variables.ephemeralContainers).filter(container,\n                container.image in variables.exemptImageExplicit ||\n                variables.exemptImagePrefixes.exists(exemption, string(container.image).startsWith(exemption))\n              ).map(container, container.image)\n          - name: badContainers\n            expression: |\n              (variables.containers + variables.initContainers + variables.ephemeralContainers).filter(container,\n                !(container.image in variables.exemptImages) && (\n                  !has(container.securityContext) ||\n                  !has(container.securityContext.allowPrivilegeEscalation) ||\n                  container.securityContext.allowPrivilegeEscalation != false\n                )\n              )\n          validations:\n          - expression: \'(has(request.operation) && request.operation == "UPDATE") || size(variables.badContainers) == 0\'\n            messageExpression: \'"Privilege escalation container is not allowed: " + variables.badContainers.map(c, c.image).join(", ")\'\n      - engine: Rego\n        source:\n          rego: |\n            package k8spspallowprivilegeescalationcontainer\n\n            import data.lib.exclude_update.is_update\n            import data.lib.exempt_container.is_exempt\n\n            violation[{"msg": msg, "details": {}}] {\n                # spec.containers.securityContext.allowPrivilegeEscalation field is immutable.\n                not is_update(input.review)\n\n                c := input_containers[_]\n                not is_exempt(c)\n                input_allow_privilege_escalation(c)\n                msg := sprintf("Privilege escalation container is not allowed: %v", [c.name])\n            }\n\n            input_allow_privilege_escalation(c) {\n                not has_field(c, "securityContext")\n            }\n            input_allow_privilege_escalation(c) {\n                not c.securityContext.allowPrivilegeEscalation == false\n            }\n            input_containers[c] {\n                c := input.review.object.spec.containers[_]\n            }\n            input_containers[c] {\n                c := input.review.object.spec.initContainers[_]\n            }\n            input_containers[c] {\n                c := input.review.object.spec.ephemeralContainers[_]\n            }\n            # has_field returns whether an object has a field\n            has_field(object, field) = true {\n                object[field]\n            }\n          libs:\n          - |\n            package lib.exclude_update\n\n            is_update(review) {\n                review.operation == "UPDATE"\n            }\n          - |\n            package lib.exempt_container\n\n            is_exempt(container) {\n                exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])\n                img := container.image\n                exemption := exempt_images[_]\n                _matches_exemption(img, exemption)\n            }\n\n            _matches_exemption(img, exemption) {\n                not endswith(exemption, "*")\n                exemption == img\n            }\n\n            _matches_exemption(img, exemption) {\n                endswith(exemption, "*")\n                prefix := trim_suffix(exemption, "*")\n                startswith(img, prefix)\n            }\n\n'})}),"\n",(0,a.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/allow-privilege-escalation/template.yaml\n"})}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsxs)(i,{children:[(0,a.jsx)("summary",{children:"allow-privilege-escalation"}),(0,a.jsxs)(i,{children:[(0,a.jsx)("summary",{children:"constraint"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sPSPAllowPrivilegeEscalationContainer\nmetadata:\n  name: psp-allow-privilege-escalation-container\nspec:\n  match:\n    kinds:\n      - apiGroups: [""]\n        kinds: ["Pod"]\n  parameters:\n    exemptImages: ["nonexistant/*"]\n\n'})}),(0,a.jsx)(n.p,{children:"Usage"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/allow-privilege-escalation/samples/psp-allow-privilege-escalation-container/constraint.yaml\n"})})]}),(0,a.jsxs)(i,{children:[(0,a.jsx)("summary",{children:"example-allowed"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-privilege-escalation-allowed\n  labels:\n    app: nginx-privilege-escalation\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    securityContext:\n      allowPrivilegeEscalation: false\n\n"})}),(0,a.jsx)(n.p,{children:"Usage"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/allow-privilege-escalation/samples/psp-allow-privilege-escalation-container/example_allowed.yaml\n"})})]}),(0,a.jsxs)(i,{children:[(0,a.jsx)("summary",{children:"example-disallowed"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-privilege-escalation-disallowed\n  labels:\n    app: nginx-privilege-escalation\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    securityContext:\n      allowPrivilegeEscalation: true\n\n"})}),(0,a.jsx)(n.p,{children:"Usage"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/allow-privilege-escalation/samples/psp-allow-privilege-escalation-container/example_disallowed.yaml\n"})})]}),(0,a.jsxs)(i,{children:[(0,a.jsx)("summary",{children:"disallowed-ephemeral"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-privilege-escalation-disallowed\n  labels:\n    app: nginx-privilege-escalation\nspec:\n  ephemeralContainers:\n  - name: nginx\n    image: nginx\n    securityContext:\n      allowPrivilegeEscalation: true\n\n"})}),(0,a.jsx)(n.p,{children:"Usage"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/allow-privilege-escalation/samples/psp-allow-privilege-escalation-container/disallowed_ephemeral.yaml\n"})})]})]})]})}function m(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>r,a:()=>l});var a=i(7294);const t={},s=a.createContext(t);function l(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);