"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5444],{2297:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=t(5893),o=t(1151);const r={id:"proc-mount",title:"Proc Mount"},i="Proc Mount",s={id:"validation/proc-mount",title:"Proc Mount",description:"Description",source:"@site/docs/validation/proc-mount.md",sourceDirName:"validation",slug:"/validation/proc-mount",permalink:"/gatekeeper-library/website/validation/proc-mount",draft:!1,unlisted:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper-library/edit/master/website/docs/validation/proc-mount.md",tags:[],version:"current",frontMatter:{id:"proc-mount",title:"Proc Mount"},sidebar:"docs",previous:{title:"Privileged Container",permalink:"/gatekeeper-library/website/validation/privileged-containers"},next:{title:"Read Only Root Filesystem",permalink:"/gatekeeper-library/website/validation/read-only-root-filesystem"}},l={},c=[{value:"Description",id:"description",level:2},{value:"Template",id:"template",level:2},{value:"Usage",id:"usage",level:3},{value:"Examples",id:"examples",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.a)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"proc-mount",children:"Proc Mount"}),"\n",(0,a.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,a.jsxs)(n.p,{children:["Controls the allowed ",(0,a.jsx)(n.code,{children:"procMount"})," types for the container. Corresponds to the ",(0,a.jsx)(n.code,{children:"allowedProcMountTypes"})," field in a PodSecurityPolicy. For more information, see ",(0,a.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#allowedprocmounttypes",children:"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#allowedprocmounttypes"})]}),"\n",(0,a.jsx)(n.h2,{id:"template",children:"Template"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8spspprocmount\n  annotations:\n    metadata.gatekeeper.sh/title: "Proc Mount"\n    metadata.gatekeeper.sh/version: 1.1.2\n    description: >-\n      Controls the allowed `procMount` types for the container. Corresponds to\n      the `allowedProcMountTypes` field in a PodSecurityPolicy. For more\n      information, see\n      https://kubernetes.io/docs/concepts/policy/pod-security-policy/#allowedprocmounttypes\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sPSPProcMount\n      validation:\n        # Schema for the `parameters` field\n        openAPIV3Schema:\n          type: object\n          description: >-\n            Controls the allowed `procMount` types for the container. Corresponds to\n            the `allowedProcMountTypes` field in a PodSecurityPolicy. For more\n            information, see\n            https://kubernetes.io/docs/concepts/policy/pod-security-policy/#allowedprocmounttypes\n          properties:\n            exemptImages:\n              description: >-\n                Any container that uses an image that matches an entry in this list will be excluded\n                from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.\n\n                It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name)\n                in order to avoid unexpectedly exempting images from an untrusted repository.\n              type: array\n              items:\n                type: string\n            procMount:\n              type: string\n              description: >-\n                Defines the strategy for the security exposure of certain paths\n                in `/proc` by the container runtime. Setting to `Default` uses\n                the runtime defaults, where `Unmasked` bypasses the default\n                behavior.\n              enum:\n                - Default\n                - Unmasked\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      code:\n      - engine: K8sNativeValidation\n        source:\n          variables:\n          - name: containers\n            expression: \'has(variables.anyObject.spec.containers) ? variables.anyObject.spec.containers : []\'\n          - name: initContainers\n            expression: \'has(variables.anyObject.spec.initContainers) ? variables.anyObject.spec.initContainers : []\'\n          - name: ephemeralContainers\n            expression: \'has(variables.anyObject.spec.ephemeralContainers) ? variables.anyObject.spec.ephemeralContainers : []\'\n          - name: exemptImagePrefixes\n            expression: |\n              !has(variables.params.exemptImages) ? [] :\n                variables.params.exemptImages.filter(image, image.endsWith("*")).map(image, string(image).replace("*", ""))\n          - name: exemptImageExplicit\n            expression: |\n              !has(variables.params.exemptImages) ? [] : \n                variables.params.exemptImages.filter(image, !image.endsWith("*"))\n          - name: exemptImages\n            expression: |\n              (variables.containers + variables.initContainers + variables.ephemeralContainers).filter(\n                container,\n                container.image in variables.exemptImageExplicit ||\n                  variables.exemptImagePrefixes.exists(\n                    exemption,\n                    string(container.image).startsWith(exemption)\n                  )\n              ).map(container, container.image)\n          - name: allowedProcMount\n            expression: |\n              !has(variables.params) ? "default" : \n                !has(variables.params.procMount) ? "default" : \n                  (variables.params.procMount.lowerAscii() == "default" || variables.params.procMount.lowerAscii() == "unmasked") ? variables.params.procMount.lowerAscii() : "default"\n          - name: badContainers\n            expression: |\n              (variables.containers + variables.initContainers + variables.ephemeralContainers).filter(container,\n                !(container.image in variables.exemptImages) &&\n                !(\n                  (variables.allowedProcMount == "unmasked") ||\n                  (variables.allowedProcMount == "default" && (!has(container.securityContext) || !has(container.securityContext.procMount) || container.securityContext.procMount == null || container.securityContext.procMount.lowerAscii() == "default"))\n                )\n              ).map(container, "ProcMount type is not allowed, container: " + container.name +". Allowed procMount types: " + variables.allowedProcMount)\n          validations:\n          - expression: \'(has(request.operation) && request.operation == "UPDATE") || size(variables.badContainers) == 0\'\n            messageExpression: \'variables.badContainers.join("\\n")\' \n      - engine: Rego\n        source:\n          rego: |\n            package k8spspprocmount\n\n            import data.lib.exclude_update.is_update\n            import data.lib.exempt_container.is_exempt\n\n            violation[{"msg": msg, "details": {}}] {\n                # spec.containers.securityContext.procMount field is immutable.\n                not is_update(input.review)\n\n                c := input_containers[_]\n                not is_exempt(c)\n                allowedProcMount := get_allowed_proc_mount(input)\n                not input_proc_mount_type_allowed(allowedProcMount, c)\n                msg := sprintf("ProcMount type is not allowed, container: %v. Allowed procMount types: %v", [c.name, allowedProcMount])\n            }\n\n            input_proc_mount_type_allowed(allowedProcMount, c) {\n                allowedProcMount == "default"\n                lower(c.securityContext.procMount) == "default"\n            }\n            input_proc_mount_type_allowed(allowedProcMount, _) {\n                allowedProcMount == "unmasked"\n            }\n\n            input_containers[c] {\n                c := input.review.object.spec.containers[_]\n                c.securityContext.procMount != null\n            }\n            input_containers[c] {\n                c := input.review.object.spec.initContainers[_]\n                c.securityContext.procMount != null\n            }\n            input_containers[c] {\n                c := input.review.object.spec.ephemeralContainers[_]\n                c.securityContext.procMount != null\n            }\n\n            get_allowed_proc_mount(arg) = out {\n                not arg.parameters\n                out = "default"\n            }\n            get_allowed_proc_mount(arg) = out {\n                not arg.parameters.procMount\n                out = "default"\n            }\n            get_allowed_proc_mount(arg) = out {\n                arg.parameters.procMount\n                not valid_proc_mount(arg.parameters.procMount)\n                out = "default"\n            }\n            get_allowed_proc_mount(arg) = out {\n                valid_proc_mount(arg.parameters.procMount)\n                out = lower(arg.parameters.procMount)\n            }\n\n            valid_proc_mount(str) {\n                lower(str) == "default"\n            }\n            valid_proc_mount(str) {\n                lower(str) == "unmasked"\n            }\n          libs:\n            - |\n              package lib.exclude_update\n\n              is_update(review) {\n                  review.operation == "UPDATE"\n              }\n            - |\n              package lib.exempt_container\n\n              is_exempt(container) {\n                  exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])\n                  img := container.image\n                  exemption := exempt_images[_]\n                  _matches_exemption(img, exemption)\n              }\n\n              _matches_exemption(img, exemption) {\n                  not endswith(exemption, "*")\n                  exemption == img\n              }\n\n              _matches_exemption(img, exemption) {\n                  endswith(exemption, "*")\n                  prefix := trim_suffix(exemption, "*")\n                  startswith(img, prefix)\n              }\n\n'})}),"\n",(0,a.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/proc-mount/template.yaml\n"})}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"default-proc-mount-required"}),(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"constraint"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sPSPProcMount\nmetadata:\n  name: psp-proc-mount\nspec:\n  match:\n    kinds:\n      - apiGroups: [""]\n        kinds: ["Pod"]\n  parameters:\n    procMount: Default\n    exemptImages:\n    - "safeimages.com/*"\n\n'})}),(0,a.jsx)(n.p,{children:"Usage"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/proc-mount/samples/psp-proc-mount/constraint.yaml\n"})})]}),(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"example-disallowed"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-proc-mount-disallowed\n  labels:\n    app: nginx-proc-mount\nspec:\n  hostUsers: false\n  containers:\n  - name: nginx\n    image: nginx\n    securityContext:\n      procMount: Unmasked #Default\n\n"})}),(0,a.jsx)(n.p,{children:"Usage"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/proc-mount/samples/psp-proc-mount/example_disallowed.yaml\n"})})]}),(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"example-allowed"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-proc-mount-allowed\n  labels:\n    app: nginx-proc-mount\nspec:\n  hostUsers: false\n  containers:\n  - name: nginx\n    image: nginx\n    securityContext:\n      procMount: Default\n\n"})}),(0,a.jsx)(n.p,{children:"Usage"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/proc-mount/samples/psp-proc-mount/example_allowed.yaml\n"})})]}),(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"example-allowed-missing"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-proc-mount-disallowed\n  labels:\n    app: nginx-proc-mount\nspec:\n  hostUsers: false\n  containers:\n  - name: no-proc-mount-value\n    image: nginx\n    securityContext:\n      procMount: null\n  - name: no-proc-mount\n    image: nginx\n    securityContext: {}\n  - name: no-context\n    image: nginx\n\n"})}),(0,a.jsx)(n.p,{children:"Usage"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/proc-mount/samples/psp-proc-mount/example_allowed_missing.yaml\n"})})]}),(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"disallowed-ephemeral"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-proc-mount-disallowed\n  labels:\n    app: nginx-proc-mount\nspec:\n  hostUsers: false\n  ephemeralContainers:\n  - name: nginx\n    image: nginx\n    securityContext:\n      procMount: Unmasked #Default\n\n"})}),(0,a.jsx)(n.p,{children:"Usage"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/proc-mount/samples/psp-proc-mount/disallowed_ephemeral.yaml\n"})})]}),(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"image-exempt-prefix-match"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-proc-mount-exempt-image\n  labels:\n    app: nginx-proc-mount\nspec:\n  hostUsers: false\n  containers:\n  - name: nginx\n    image: safeimages.com/nginx\n    securityContext:\n      procMount: Unmasked #Default\n\n"})}),(0,a.jsx)(n.p,{children:"Usage"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/proc-mount/samples/psp-proc-mount/example_allowed_exempt_image.yaml\n"})})]})]})]})}function m(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>i});var a=t(7294);const o={},r=a.createContext(o);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);