"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7108],{2017:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>t,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=a(5893),i=a(1151);const o={id:"apparmor",title:"App Armor"},t="App Armor",s={id:"validation/apparmor",title:"App Armor",description:"Description",source:"@site/docs/validation/apparmor.md",sourceDirName:"validation",slug:"/validation/apparmor",permalink:"/gatekeeper-library/website/validation/apparmor",draft:!1,unlisted:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper-library/edit/master/website/docs/validation/apparmor.md",tags:[],version:"current",frontMatter:{id:"apparmor",title:"App Armor"},sidebar:"docs",previous:{title:"Allow Privilege Escalation in Container",permalink:"/gatekeeper-library/website/validation/allow-privilege-escalation"},next:{title:"Capabilities",permalink:"/gatekeeper-library/website/validation/capabilities"}},p={},l=[{value:"Description",id:"description",level:2},{value:"Template",id:"template",level:2},{value:"Usage",id:"usage",level:3},{value:"Examples",id:"examples",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...e.components},{Details:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"app-armor",children:"App Armor"}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["Configures an allow-list of AppArmor profiles for use by containers. This corresponds to specific annotations applied to a PodSecurityPolicy. For information on AppArmor, see ",(0,r.jsx)(n.a,{href:"https://kubernetes.io/docs/tutorials/clusters/apparmor/",children:"https://kubernetes.io/docs/tutorials/clusters/apparmor/"})]}),"\n",(0,r.jsx)(n.h2,{id:"template",children:"Template"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8spspapparmor\n  annotations:\n    metadata.gatekeeper.sh/title: "App Armor"\n    metadata.gatekeeper.sh/version: 1.1.0\n    description: >-\n      Configures an allow-list of AppArmor profiles for use by containers.\n      This corresponds to specific annotations applied to a PodSecurityPolicy.\n      For information on AppArmor, see\n      https://kubernetes.io/docs/tutorials/clusters/apparmor/\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sPSPAppArmor\n      validation:\n        # Schema for the `parameters` field\n        openAPIV3Schema:\n          type: object\n          description: >-\n            Configures an allow-list of AppArmor profiles for use by containers.\n            This corresponds to specific annotations applied to a PodSecurityPolicy.\n            For information on AppArmor, see\n            https://kubernetes.io/docs/tutorials/clusters/apparmor/\n          properties:\n            exemptImages:\n              description: >-\n                Any container that uses an image that matches an entry in this list will be excluded\n                from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.\n\n                It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name)\n                in order to avoid unexpectedly exempting images from an untrusted repository.\n              type: array\n              items:\n                type: string\n            allowedProfiles:\n              description: "An array of AppArmor profiles. Examples: `runtime/default`, `unconfined`."\n              type: array\n              items:\n                type: string\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      code:\n      - engine: K8sNativeValidation\n        source:\n          variables:\n          - name: containers\n            expression: \'has(variables.anyObject.spec.containers) ? variables.anyObject.spec.containers : []\'\n          - name: initContainers\n            expression: \'has(variables.anyObject.spec.initContainers) ? variables.anyObject.spec.initContainers : []\'\n          - name: ephemeralContainers\n            expression: \'has(variables.anyObject.spec.ephemeralContainers) ? variables.anyObject.spec.ephemeralContainers : []\'\n          - name: podAppArmor\n            expression: \'has(variables.anyObject.spec.securityContext) && has(variables.anyObject.spec.securityContext.appArmorProfile) ? variables.anyObject.spec.securityContext.appArmorProfile : null\'\n          - name: canonicalPodAppArmor\n            expression: |\n              variables.podAppArmor == null ? "runtime/default" : \n                variables.podAppArmor.type == "RuntimeDefault" ? "runtime/default" :\n                  variables.podAppArmor.type == "Unconfined" ? "unconfined" : \n                    variables.podAppArmor.type == "Localhost" ? "localhost/" + variables.podAppArmor.localhostProfile : ""\n          # break this mapping up by container type (regular/init/ephemeral) to avoid problems with name collisions,\n          # which may be a problem when running shift-left (no K8s API server to enforce uniqueness of container names)\n          - name: appArmorByContainer\n            expression: |\n              variables.containers.map(container, [container.name,\n                has(container.securityContext) && has(container.securityContext.appArmorProfile) ?\n                  (container.securityContext.appArmorProfile.type == "RuntimeDefault" ? "runtime/default" :\n                    container.securityContext.appArmorProfile.type == "Unconfined" ? "unconfined" : \n                      container.securityContext.appArmorProfile.type == "Localhost" ? "localhost/" + container.securityContext.appArmorProfile.localhostProfile : "") :\n                  has(variables.anyObject.metadata.annotations) && ("container.apparmor.security.beta.kubernetes.io/" + container.name) in variables.anyObject.metadata.annotations ?\n                    variables.anyObject.metadata.annotations["container.apparmor.security.beta.kubernetes.io/" + container.name] :\n                      variables.canonicalPodAppArmor\n              ])\n          - name: appArmorByInitContainer\n            expression: |\n              variables.initContainers.map(container, [container.name,\n                has(container.securityContext) && has(container.securityContext.appArmorProfile) ?\n                  (container.securityContext.appArmorProfile.type == "RuntimeDefault" ? "runtime/default" :\n                    container.securityContext.appArmorProfile.type == "Unconfined" ? "unconfined" : \n                      container.securityContext.appArmorProfile.type == "Localhost" ? "localhost/" + container.securityContext.appArmorProfile.localhostProfile : "") :\n                  has(variables.anyObject.metadata.annotations) && ("container.apparmor.security.beta.kubernetes.io/" + container.name) in variables.anyObject.metadata.annotations ?\n                    variables.anyObject.metadata.annotations["container.apparmor.security.beta.kubernetes.io/" + container.name] :\n                      variables.canonicalPodAppArmor\n              ])\n          - name: appArmorByEphemeralContainer\n            expression: |\n              variables.ephemeralContainers.map(container, [container.name,\n                has(container.securityContext) && has(container.securityContext.appArmorProfile) ?\n                  (container.securityContext.appArmorProfile.type == "RuntimeDefault" ? "runtime/default" :\n                    container.securityContext.appArmorProfile.type == "Unconfined" ? "unconfined" : \n                      container.securityContext.appArmorProfile.type == "Localhost" ? "localhost/" + container.securityContext.appArmorProfile.localhostProfile : "") :\n                  has(variables.anyObject.metadata.annotations) && ("container.apparmor.security.beta.kubernetes.io/" + container.name) in variables.anyObject.metadata.annotations ?\n                    variables.anyObject.metadata.annotations["container.apparmor.security.beta.kubernetes.io/" + container.name] :\n                      variables.canonicalPodAppArmor\n              ])\n          - name: exemptImagePrefixes\n            expression: |\n              !has(variables.params.exemptImages) ? [] :\n                variables.params.exemptImages.filter(image, image.endsWith("*")).map(image, string(image).replace("*", ""))\n          - name: exemptImageExplicit\n            expression: |\n              !has(variables.params.exemptImages) ? [] : \n                variables.params.exemptImages.filter(image, !image.endsWith("*"))\n          - name: exemptImages\n            expression: |\n              (variables.containers + variables.initContainers + variables.ephemeralContainers).filter(container,\n                container.image in variables.exemptImageExplicit ||\n                variables.exemptImagePrefixes.exists(exemption, string(container.image).startsWith(exemption))\n              ).map(container, container.image)\n          validations:\n          - expression: |\n              variables.containers.all(container,\n                (container.image in variables.exemptImages) ||\n                variables.appArmorByContainer.exists(pair, pair[0] == container.name && pair[1] in variables.params.allowedProfiles)\n              )\n            messageExpression: \'"AppArmor profile is not allowed. Allowed Profiles: " + variables.params.allowedProfiles.join(", ")\'\n          - expression: |\n              variables.initContainers.all(container,\n                (container.image in variables.exemptImages) ||\n                variables.appArmorByInitContainer.exists(pair, pair[0] == container.name && pair[1] in variables.params.allowedProfiles)\n              )\n            messageExpression: \'"AppArmor profile is not allowed. Allowed Profiles: " + variables.params.allowedProfiles.join(", ")\'\n          - expression: |\n              variables.ephemeralContainers.all(container,\n                (container.image in variables.exemptImages) ||\n                variables.appArmorByEphemeralContainer.exists(pair, pair[0] == container.name && pair[1] in variables.params.allowedProfiles)\n              )\n            messageExpression: \'"AppArmor profile is not allowed. Allowed Profiles: " + variables.params.allowedProfiles.join(", ")\'\n      - engine: Rego\n        source:\n          rego: |\n            package k8spspapparmor\n\n            import data.lib.exempt_container.is_exempt\n\n            violation[{"msg": msg, "details": {}}] {\n                container := input_containers[_]\n                not is_exempt(container)\n                not input_apparmor_allowed(input.review.object, container)\n                msg := sprintf("AppArmor profile is not allowed, pod: %v, container: %v. Allowed profiles: %v", [input.review.object.metadata.name, container.name, input.parameters.allowedProfiles])\n            }\n\n            input_apparmor_allowed(pod, container) {\n                get_apparmor_profile(pod, container) == input.parameters.allowedProfiles[_]\n            }\n\n            input_containers[c] {\n                c := input.review.object.spec.containers[_]\n            }\n            input_containers[c] {\n                c := input.review.object.spec.initContainers[_]\n            }\n            input_containers[c] {\n                c := input.review.object.spec.ephemeralContainers[_]\n            }\n\n            get_apparmor_profile(_, container) = out {\n                profile := object.get(container, ["securityContext", "appArmorProfile"], null)\n                profile != null\n                out := canonicalize_apparmor_profile(profile)\n            }\n\n            get_apparmor_profile(pod, container) = out {\n                profile := object.get(container, ["securityContext", "appArmorProfile"], null)\n                profile == null\n                out := pod.metadata.annotations[sprintf("container.apparmor.security.beta.kubernetes.io/%v", [container.name])]\n            }\n\n            get_apparmor_profile(pod, container) = out {\n                profile := object.get(container, ["securityContext", "appArmorProfile"], null)\n                profile == null\n                not pod.metadata.annotations[sprintf("container.apparmor.security.beta.kubernetes.io/%v", [container.name])]\n                out := canonicalize_apparmor_profile(object.get(pod, ["spec", "securityContext", "appArmorProfile"], null))\n            }\n\n            canonicalize_apparmor_profile(profile) = out {\n                profile.type == "RuntimeDefault"\n                out := "runtime/default"\n            }\n\n            canonicalize_apparmor_profile(profile) = out {\n                profile.type == "Unconfined"\n                out := "unconfined"\n            }\n\n            canonicalize_apparmor_profile(profile) = out {\n                profile.type = "Localhost"\n                out := sprintf("localhost/%s", [profile.localhostProfile])\n            }\n\n            canonicalize_apparmor_profile(profile) = out {\n                profile == null\n                out := "runtime/default"\n            }\n          libs:\n          - |\n            package lib.exempt_container\n\n            is_exempt(container) {\n                exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])\n                img := container.image\n                exemption := exempt_images[_]\n                _matches_exemption(img, exemption)\n            }\n\n            _matches_exemption(img, exemption) {\n                not endswith(exemption, "*")\n                exemption == img\n            }\n\n            _matches_exemption(img, exemption) {\n                endswith(exemption, "*")\n                prefix := trim_suffix(exemption, "*")\n                startswith(img, prefix)\n            }\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/apparmor/template.yaml\n"})}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(a,{children:[(0,r.jsx)("summary",{children:"apparmor"}),(0,r.jsxs)(a,{children:[(0,r.jsx)("summary",{children:"constraint"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sPSPAppArmor\nmetadata:\n  name: psp-apparmor\nspec:\n  match:\n    kinds:\n      - apiGroups: [""]\n        kinds: ["Pod"]\n  parameters:\n    allowedProfiles:\n    - localhost/custom\n\n'})}),(0,r.jsx)(n.p,{children:"Usage"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/apparmor/samples/psp-apparmor/constraint.yaml\n"})})]}),(0,r.jsxs)(a,{children:[(0,r.jsx)("summary",{children:"example-allowed"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-apparmor-allowed\n  annotations:\n    # apparmor.security.beta.kubernetes.io/pod: unconfined # runtime/default\n    container.apparmor.security.beta.kubernetes.io/nginx: localhost/custom\n  labels:\n    app: nginx-apparmor\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n\n"})}),(0,r.jsx)(n.p,{children:"Usage"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/apparmor/samples/psp-apparmor/example_allowed.yaml\n"})})]}),(0,r.jsxs)(a,{children:[(0,r.jsx)("summary",{children:"example-allowed-container"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-apparmor-allowed\n  labels:\n    app: nginx-apparmor\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    securityContext:\n      appArmorProfile:\n        type: "Localhost"\n        localhostProfile: "custom"\n\n'})}),(0,r.jsx)(n.p,{children:"Usage"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/apparmor/samples/psp-apparmor/example_allowed_container.yaml\n"})})]}),(0,r.jsxs)(a,{children:[(0,r.jsx)("summary",{children:"example-allowed-pod"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-apparmor-allowed\n  labels:\n    app: nginx-apparmor\nspec:\n  securityContext:\n    appArmorProfile:\n      type: "Localhost"\n      localhostProfile: "custom"\n  containers:\n  - name: nginx\n    image: nginx\n\n'})}),(0,r.jsx)(n.p,{children:"Usage"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/apparmor/samples/psp-apparmor/example_allowed_pod.yaml\n"})})]}),(0,r.jsxs)(a,{children:[(0,r.jsx)("summary",{children:"example-allowed-override"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-apparmor-allowed\n  labels:\n    app: nginx-apparmor\nspec:\n  securityContext:\n    appArmorProfile:\n      type: "Unconfined"\n  containers:\n  - name: nginx\n    image: nginx\n    securityContext:\n      appArmorProfile:\n        type: "Localhost"\n        localhostProfile: "custom"\n\n'})}),(0,r.jsx)(n.p,{children:"Usage"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/apparmor/samples/psp-apparmor/example_allowed_override.yaml\n"})})]}),(0,r.jsxs)(a,{children:[(0,r.jsx)("summary",{children:"example-disallowed"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-apparmor-disallowed\n  annotations:\n    # apparmor.security.beta.kubernetes.io/pod: unconfined # runtime/default\n    container.apparmor.security.beta.kubernetes.io/nginx: unconfined\n  labels:\n    app: nginx-apparmor\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n\n"})}),(0,r.jsx)(n.p,{children:"Usage"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/apparmor/samples/psp-apparmor/example_disallowed.yaml\n"})})]}),(0,r.jsxs)(a,{children:[(0,r.jsx)("summary",{children:"example-disallowed-override"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-apparmor-allowed\n  labels:\n    app: nginx-apparmor\nspec:\n  securityContext:\n    appArmorProfile:\n      type: "Localhost"\n      localhostProfile: "custom"\n  containers:\n  - name: nginx\n    image: nginx\n    securityContext:\n      appArmorProfile:\n        type: "Unconfined"\n\n'})}),(0,r.jsx)(n.p,{children:"Usage"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/apparmor/samples/psp-apparmor/example_disallowed_override.yaml\n"})})]}),(0,r.jsxs)(a,{children:[(0,r.jsx)("summary",{children:"example-disallowed-no-profile"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-apparmor-disallowed\n  labels:\n    app: nginx-apparmor\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n\n"})}),(0,r.jsx)(n.p,{children:"Usage"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/apparmor/samples/psp-apparmor/example_disallowed_no_profile.yaml\n"})})]}),(0,r.jsxs)(a,{children:[(0,r.jsx)("summary",{children:"disallowed-ephemeral"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-apparmor-disallowed\n  annotations:\n    # apparmor.security.beta.kubernetes.io/pod: unconfined # runtime/default\n    container.apparmor.security.beta.kubernetes.io/nginx: unconfined\n  labels:\n    app: nginx-apparmor\nspec:\n  ephemeralContainers:\n  - name: nginx\n    image: nginx\n\n"})}),(0,r.jsx)(n.p,{children:"Usage"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/apparmor/samples/psp-apparmor/disallowed_ephemeral.yaml\n"})})]})]})]})}function m(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},1151:(e,n,a)=>{a.d(n,{Z:()=>s,a:()=>t});var r=a(7294);const i={},o=r.createContext(i);function t(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);