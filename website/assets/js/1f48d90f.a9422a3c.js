"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7744],{6352:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var t=i(5893),s=i(1151);const a={id:"selinux",title:"SELinux V2"},o="SELinux V2",l={id:"validation/selinux",title:"SELinux V2",description:"Description",source:"@site/docs/validation/selinux.md",sourceDirName:"validation",slug:"/validation/selinux",permalink:"/gatekeeper-library/website/validation/selinux",draft:!1,unlisted:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper-library/edit/master/website/docs/validation/selinux.md",tags:[],version:"current",frontMatter:{id:"selinux",title:"SELinux V2"},sidebar:"docs",previous:{title:"Seccomp V2",permalink:"/gatekeeper-library/website/validation/seccompv2"},next:{title:"Allowed Users",permalink:"/gatekeeper-library/website/validation/users"}},r={},p=[{value:"Description",id:"description",level:2},{value:"Template",id:"template",level:2},{value:"Usage",id:"usage",level:3},{value:"Examples",id:"examples",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.a)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"selinux-v2",children:"SELinux V2"}),"\n",(0,t.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,t.jsxs)(n.p,{children:["Defines an allow-list of seLinuxOptions configurations for pod containers. Corresponds to a PodSecurityPolicy requiring SELinux configs. For more information, see ",(0,t.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#selinux",children:"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#selinux"})]}),"\n",(0,t.jsx)(n.h2,{id:"template",children:"Template"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8spspselinuxv2\n  annotations:\n    metadata.gatekeeper.sh/title: "SELinux V2"\n    metadata.gatekeeper.sh/version: 1.0.3\n    description: >-\n      Defines an allow-list of seLinuxOptions configurations for pod\n      containers. Corresponds to a PodSecurityPolicy requiring SELinux configs.\n      For more information, see\n      https://kubernetes.io/docs/concepts/policy/pod-security-policy/#selinux\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sPSPSELinuxV2\n      validation:\n        # Schema for the `parameters` field\n        openAPIV3Schema:\n          type: object\n          description: >-\n            Defines an allow-list of seLinuxOptions configurations for pod\n            containers. Corresponds to a PodSecurityPolicy requiring SELinux configs.\n            For more information, see\n            https://kubernetes.io/docs/concepts/policy/pod-security-policy/#selinux\n          properties:\n            exemptImages:\n              description: >-\n                Any container that uses an image that matches an entry in this list will be excluded\n                from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.\n\n                It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name)\n                in order to avoid unexpectedly exempting images from an untrusted repository.\n              type: array\n              items:\n                type: string\n            allowedSELinuxOptions:\n              type: array\n              description: "An allow-list of SELinux options configurations."\n              items:\n                type: object\n                description: "An allowed configuration of SELinux options for a pod container."\n                properties:\n                  level:\n                    type: string\n                    description: "An SELinux level."\n                  role:\n                    type: string\n                    description: "An SELinux role."\n                  type:\n                    type: string\n                    description: "An SELinux type."\n                  user:\n                    type: string\n                    description: "An SELinux user."\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8spspselinux\n\n        import data.lib.exclude_update.is_update\n        import data.lib.exempt_container.is_exempt\n\n        # Disallow top level custom SELinux options\n        violation[{"msg": msg, "details": {}}] {\n            # spec.securityContext.seLinuxOptions field is immutable.\n            not is_update(input.review)\n\n            has_field(input.review.object.spec.securityContext, "seLinuxOptions")\n            not input_seLinuxOptions_allowed(input.review.object.spec.securityContext.seLinuxOptions)\n            msg := sprintf("SELinux options is not allowed, pod: %v. Allowed options: %v", [input.review.object.metadata.name, input.parameters.allowedSELinuxOptions])\n        }\n        # Disallow container level custom SELinux options\n        violation[{"msg": msg, "details": {}}] {\n            # spec.containers.securityContext.seLinuxOptions field is immutable.\n            not is_update(input.review)\n\n            c := input_security_context[_]\n            not is_exempt(c)\n            has_field(c.securityContext, "seLinuxOptions")\n            not input_seLinuxOptions_allowed(c.securityContext.seLinuxOptions)\n            msg := sprintf("SELinux options is not allowed, pod: %v, container: %v. Allowed options: %v", [input.review.object.metadata.name, c.name, input.parameters.allowedSELinuxOptions])\n        }\n\n        input_seLinuxOptions_allowed(options) {\n            params := input.parameters.allowedSELinuxOptions[_]\n            field_allowed("level", options, params)\n            field_allowed("role", options, params)\n            field_allowed("type", options, params)\n            field_allowed("user", options, params)\n        }\n\n        field_allowed(field, options, params) {\n            params[field] == options[field]\n        }\n        field_allowed(field, options, _) {\n            not has_field(options, field)\n        }\n\n        input_security_context[c] {\n            c := input.review.object.spec.containers[_]\n            has_field(c.securityContext, "seLinuxOptions")\n        }\n        input_security_context[c] {\n            c := input.review.object.spec.initContainers[_]\n            has_field(c.securityContext, "seLinuxOptions")\n        }\n        input_security_context[c] {\n            c := input.review.object.spec.ephemeralContainers[_]\n            has_field(c.securityContext, "seLinuxOptions")\n        }\n\n        # has_field returns whether an object has a field\n        has_field(object, field) = true {\n            object[field]\n        }\n      libs:\n        - |\n          package lib.exclude_update\n\n          is_update(review) {\n              review.operation == "UPDATE"\n          }\n        - |\n          package lib.exempt_container\n\n          is_exempt(container) {\n              exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])\n              img := container.image\n              exemption := exempt_images[_]\n              _matches_exemption(img, exemption)\n          }\n\n          _matches_exemption(img, exemption) {\n              not endswith(exemption, "*")\n              exemption == img\n          }\n\n          _matches_exemption(img, exemption) {\n              endswith(exemption, "*")\n              prefix := trim_suffix(exemption, "*")\n              startswith(img, prefix)\n          }\n\n'})}),"\n",(0,t.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/selinux/template.yaml\n"})}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsxs)(i,{children:[(0,t.jsx)("summary",{children:"require-matching-selinux-options"}),(0,t.jsxs)(i,{children:[(0,t.jsx)("summary",{children:"constraint"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sPSPSELinuxV2\nmetadata:\n  name: psp-selinux-v2\nspec:\n  match:\n    kinds:\n      - apiGroups: [""]\n        kinds: ["Pod"]\n  parameters:\n    allowedSELinuxOptions:\n      - level: s0:c123,c456\n        role: object_r\n        type: svirt_sandbox_file_t\n        user: system_u\n\n'})}),(0,t.jsx)(n.p,{children:"Usage"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/selinux/samples/psp-selinux-v2/constraint.yaml\n"})})]}),(0,t.jsxs)(i,{children:[(0,t.jsx)("summary",{children:"example-disallowed"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n    name: nginx-selinux-disallowed\n    labels:\n        app: nginx-selinux\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    securityContext:\n      seLinuxOptions:\n        level: s1:c234,c567\n        user: sysadm_u\n        role: sysadm_r\n        type: svirt_lxc_net_t\n\n"})}),(0,t.jsx)(n.p,{children:"Usage"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/selinux/samples/psp-selinux-v2/example_disallowed.yaml\n"})})]}),(0,t.jsxs)(i,{children:[(0,t.jsx)("summary",{children:"example-allowed"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n    name: nginx-selinux-allowed\n    labels:\n        app: nginx-selinux\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    securityContext:\n      seLinuxOptions:\n        level: s0:c123,c456\n        role: object_r\n        type: svirt_sandbox_file_t\n        user: system_u\n\n"})}),(0,t.jsx)(n.p,{children:"Usage"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/selinux/samples/psp-selinux-v2/example_allowed.yaml\n"})})]}),(0,t.jsxs)(i,{children:[(0,t.jsx)("summary",{children:"disallowed-ephemeral"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n    name: nginx-selinux-disallowed\n    labels:\n        app: nginx-selinux\nspec:\n  ephemeralContainers:\n  - name: nginx\n    image: nginx\n    securityContext:\n      seLinuxOptions:\n        level: s1:c234,c567\n        user: sysadm_u\n        role: sysadm_r\n        type: svirt_lxc_net_t\n\n"})}),(0,t.jsx)(n.p,{children:"Usage"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/selinux/samples/psp-selinux-v2/disallowed_ephemeral.yaml\n"})})]})]})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>l,a:()=>o});var t=i(7294);const s={},a=t.createContext(s);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);