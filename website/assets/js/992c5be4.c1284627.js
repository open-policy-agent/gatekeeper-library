"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3118],{9123:(e,i,a)=>{a.r(i),a.d(i,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var n=a(5893),t=a(1151);const s={id:"capabilities",title:"Capabilities"},r="Capabilities",o={id:"validation/capabilities",title:"Capabilities",description:"Description",source:"@site/docs/validation/capabilities.md",sourceDirName:"validation",slug:"/validation/capabilities",permalink:"/gatekeeper-library/website/validation/capabilities",draft:!1,unlisted:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper-library/edit/master/website/docs/validation/capabilities.md",tags:[],version:"current",frontMatter:{id:"capabilities",title:"Capabilities"},sidebar:"docs",previous:{title:"App Armor",permalink:"/gatekeeper-library/website/validation/apparmor"},next:{title:"FlexVolumes",permalink:"/gatekeeper-library/website/validation/flexvolume-drivers"}},l={},p=[{value:"Description",id:"description",level:2},{value:"Template",id:"template",level:2},{value:"Usage",id:"usage",level:3},{value:"Examples",id:"examples",level:2}];function c(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.a)(),...e.components},{Details:a}=i;return a||function(e,i){throw new Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h1,{id:"capabilities",children:"Capabilities"}),"\n",(0,n.jsx)(i.h2,{id:"description",children:"Description"}),"\n",(0,n.jsxs)(i.p,{children:["Controls Linux capabilities on containers. Corresponds to the ",(0,n.jsx)(i.code,{children:"allowedCapabilities"})," and ",(0,n.jsx)(i.code,{children:"requiredDropCapabilities"})," fields in a PodSecurityPolicy. For more information, see ",(0,n.jsx)(i.a,{href:"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities",children:"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities"})]}),"\n",(0,n.jsx)(i.h2,{id:"template",children:"Template"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-yaml",children:'apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8spspcapabilities\n  annotations:\n    metadata.gatekeeper.sh/title: "Capabilities"\n    metadata.gatekeeper.sh/version: 1.1.0\n    description: >-\n      Controls Linux capabilities on containers. Corresponds to the\n      `allowedCapabilities` and `requiredDropCapabilities` fields in a\n      PodSecurityPolicy. For more information, see\n      https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sPSPCapabilities\n      validation:\n        # Schema for the `parameters` field\n        openAPIV3Schema:\n          type: object\n          description: >-\n            Controls Linux capabilities on containers. Corresponds to the\n            `allowedCapabilities` and `requiredDropCapabilities` fields in a\n            PodSecurityPolicy. For more information, see\n            https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities\n          properties:\n            exemptImages:\n              description: >-\n                Any container that uses an image that matches an entry in this list will be excluded\n                from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.\n\n                It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name)\n                in order to avoid unexpectedly exempting images from an untrusted repository.\n              type: array\n              items:\n                type: string\n            allowedCapabilities:\n              type: array\n              description: "A list of Linux capabilities that can be added to a container."\n              items:\n                type: string\n            requiredDropCapabilities:\n              type: array\n              description: "A list of Linux capabilities that are required to be dropped from a container."\n              items:\n                type: string\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      code:\n      - engine: K8sNativeValidation\n        source:\n          variables:\n          - name: containers\n            expression: \'has(variables.anyObject.spec.containers) ? variables.anyObject.spec.containers : []\'\n          - name: initContainers\n            expression: \'has(variables.anyObject.spec.initContainers) ? variables.anyObject.spec.initContainers : []\'\n          - name: ephemeralContainers\n            expression: \'has(variables.anyObject.spec.ephemeralContainers) ? variables.anyObject.spec.ephemeralContainers : []\'\n          - name: allContainers\n            expression: \'variables.containers + variables.initContainers + variables.ephemeralContainers\'\n          - name: exemptImagePrefixes\n            expression: |\n              !has(variables.params.exemptImages) ? [] :\n                variables.params.exemptImages.filter(image, image.endsWith("*")).map(image, string(image).replace("*", ""))\n          - name: exemptImageExplicit\n            expression: |\n              !has(variables.params.exemptImages) ? [] : \n                variables.params.exemptImages.filter(image, !image.endsWith("*"))\n          - name: exemptImages\n            expression: |\n              (variables.containers + variables.initContainers + variables.ephemeralContainers).filter(container,\n                container.image in variables.exemptImageExplicit ||\n                variables.exemptImagePrefixes.exists(exemption, string(container.image).startsWith(exemption))\n              ).map(container, container.image)\n          - name: allowedCapabilities\n            expression: \'has(variables.params.allowedCapabilities) ? variables.params.allowedCapabilities : []\'\n          - name: allCapabilitiesAllowed\n            expression: \'"*" in variables.allowedCapabilities\'\n          - name: disallowedCapabilitiesByContainer\n            expression: |\n              variables.allContainers.map(container, !(container.image in variables.exemptImages) &&\n                !variables.allCapabilitiesAllowed && has(container.securityContext) && has(container.securityContext.capabilities) && has(container.securityContext.capabilities.add) &&\n                  container.securityContext.capabilities.add.exists(capability, !(capability in variables.allowedCapabilities)),\n                [container.name, dyn(container.securityContext.capabilities.add.filter(capability, !(capability in variables.allowedCapabilities)).join(", "))]\n              )\n          - name: requiredDropCapabilities\n            expression: \'has(variables.params.requiredDropCapabilities) ? variables.params.requiredDropCapabilities : []\'\n          - name: missingDropCapabilitiesByContainer\n            expression: |\n              variables.allContainers.map(container, !(container.image in variables.exemptImages) &&\n                size(variables.requiredDropCapabilities) > 0 && (\n                  !has(container.securityContext) || !has(container.securityContext.capabilities) || !has(container.securityContext.capabilities.drop) || (\n                    !("all" in container.securityContext.capabilities.drop) &&\n                    variables.requiredDropCapabilities.exists(capability, !(capability in container.securityContext.capabilities.drop))\n                  )\n                ),\n                [container.name, \n                  !has(container.securityContext) ? variables.requiredDropCapabilities :\n                    !has(container.securityContext.capabilities) ? variables.requiredDropCapabilities :\n                      !has(container.securityContext.capabilities.drop) ? variables.requiredDropCapabilities : \n                        variables.requiredDropCapabilities.filter(capability, !(capability in container.securityContext.capabilities.drop))\n                ]\n              )\n          validations:\n          - expression: \'(has(request.operation) && request.operation == "UPDATE") || size(variables.disallowedCapabilitiesByContainer) == 0\'\n            messageExpression: |\n              "containers have disallowed capabilities: " + variables.disallowedCapabilitiesByContainer.map(pair, "{container: " + pair[0] + ", capabilities: [" + pair[1] + "]}").join(", ")\n          - expression: \'(has(request.operation) && request.operation == "UPDATE") || size(variables.missingDropCapabilitiesByContainer) == 0\'\n            messageExpression: |\n              "containers are not dropping all required capabilities: " + variables.missingDropCapabilitiesByContainer.map(pair, "{container: " + pair[0] + ", capabilities: [" + pair[1].join(", ") + "]}").join(", ")\n      - engine: Rego\n        source:\n          rego: |\n            package capabilities\n\n            import data.lib.exclude_update.is_update\n            import data.lib.exempt_container.is_exempt\n\n            violation[{"msg": msg}] {\n              # spec.containers.securityContext.capabilities field is immutable.\n              not is_update(input.review)\n\n              container := input.review.object.spec.containers[_]\n              not is_exempt(container)\n              has_disallowed_capabilities(container)\n              msg := sprintf("container <%v> has a disallowed capability. Allowed capabilities are %v", [container.name, get_default(input.parameters, "allowedCapabilities", "NONE")])\n            }\n\n            violation[{"msg": msg}] {\n              not is_update(input.review)\n              container := input.review.object.spec.containers[_]\n              not is_exempt(container)\n              missing_drop_capabilities(container)\n              msg := sprintf("container <%v> is not dropping all required capabilities. Container must drop all of %v or \\"ALL\\"", [container.name, input.parameters.requiredDropCapabilities])\n            }\n\n\n\n            violation[{"msg": msg}] {\n              not is_update(input.review)\n              container := input.review.object.spec.initContainers[_]\n              not is_exempt(container)\n              has_disallowed_capabilities(container)\n              msg := sprintf("init container <%v> has a disallowed capability. Allowed capabilities are %v", [container.name, get_default(input.parameters, "allowedCapabilities", "NONE")])\n            }\n\n            violation[{"msg": msg}] {\n              not is_update(input.review)\n              container := input.review.object.spec.initContainers[_]\n              not is_exempt(container)\n              missing_drop_capabilities(container)\n              msg := sprintf("init container <%v> is not dropping all required capabilities. Container must drop all of %v or \\"ALL\\"", [container.name, input.parameters.requiredDropCapabilities])\n            }\n\n\n\n            violation[{"msg": msg}] {\n              not is_update(input.review)\n              container := input.review.object.spec.ephemeralContainers[_]\n              not is_exempt(container)\n              has_disallowed_capabilities(container)\n              msg := sprintf("ephemeral container <%v> has a disallowed capability. Allowed capabilities are %v", [container.name, get_default(input.parameters, "allowedCapabilities", "NONE")])\n            }\n\n            violation[{"msg": msg}] {\n              not is_update(input.review)\n              container := input.review.object.spec.ephemeralContainers[_]\n              not is_exempt(container)\n              missing_drop_capabilities(container)\n              msg := sprintf("ephemeral container <%v> is not dropping all required capabilities. Container must drop all of %v or \\"ALL\\"", [container.name, input.parameters.requiredDropCapabilities])\n            }\n\n\n            has_disallowed_capabilities(container) {\n              allowed := {c | c := lower(input.parameters.allowedCapabilities[_])}\n              not allowed["*"]\n              capabilities := {c | c := lower(container.securityContext.capabilities.add[_])}\n\n              count(capabilities - allowed) > 0\n            }\n\n            missing_drop_capabilities(container) {\n              must_drop := {c | c := lower(input.parameters.requiredDropCapabilities[_])}\n              all := {"all"}\n              dropped := {c | c := lower(container.securityContext.capabilities.drop[_])}\n\n              count(must_drop - dropped) > 0\n              count(all - dropped) > 0\n            }\n\n            get_default(obj, param, _) := obj[param]\n\n            get_default(obj, param, _default) := _default {\n              not obj[param]\n              not obj[param] == false\n            }\n          libs:\n          - |\n            package lib.exclude_update\n\n            is_update(review) {\n                review.operation == "UPDATE"\n            }\n          - |\n            package lib.exempt_container\n\n            is_exempt(container) {\n                exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])\n                img := container.image\n                exemption := exempt_images[_]\n                _matches_exemption(img, exemption)\n            }\n\n            _matches_exemption(img, exemption) {\n                not endswith(exemption, "*")\n                exemption == img\n            }\n\n            _matches_exemption(img, exemption) {\n                endswith(exemption, "*")\n                prefix := trim_suffix(exemption, "*")\n                startswith(img, prefix)\n            }\n\n'})}),"\n",(0,n.jsx)(i.h3,{id:"usage",children:"Usage"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/capabilities/template.yaml\n"})}),"\n",(0,n.jsx)(i.h2,{id:"examples",children:"Examples"}),"\n",(0,n.jsxs)(a,{children:[(0,n.jsx)("summary",{children:"capabilities"}),(0,n.jsxs)(a,{children:[(0,n.jsx)("summary",{children:"constraint"}),(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-yaml",children:'apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sPSPCapabilities\nmetadata:\n  name: capabilities-demo\nspec:\n  match:\n    kinds:\n      - apiGroups: [""]\n        kinds: ["Pod"]\n    namespaces:\n      - "default"\n  parameters:\n    allowedCapabilities: ["something"]\n    requiredDropCapabilities: ["must_drop"]\n\n'})}),(0,n.jsx)(i.p,{children:"Usage"}),(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/capabilities/samples/capabilities-demo/constraint.yaml\n"})})]}),(0,n.jsxs)(a,{children:[(0,n.jsx)("summary",{children:"example-disallowed"}),(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-yaml",children:'apiVersion: v1\nkind: Pod\nmetadata:\n  name: opa-disallowed\n  labels:\n    owner: me.agilebank.demo\nspec:\n  containers:\n    - name: opa\n      image: openpolicyagent/opa:0.9.2\n      args:\n        - "run"\n        - "--server"\n        - "--addr=localhost:8080"\n      securityContext:\n        capabilities:\n          add: ["disallowedcapability"]\n      resources:\n        limits:\n          cpu: "100m"\n          memory: "30Mi"\n'})}),(0,n.jsx)(i.p,{children:"Usage"}),(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/capabilities/samples/capabilities-demo/example_disallowed.yaml\n"})})]}),(0,n.jsxs)(a,{children:[(0,n.jsx)("summary",{children:"example-allowed"}),(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-yaml",children:'apiVersion: v1\nkind: Pod\nmetadata:\n  name: opa-allowed\n  labels:\n    owner: me.agilebank.demo\nspec:\n  containers:\n    - name: opa\n      image: openpolicyagent/opa:0.9.2\n      args:\n        - "run"\n        - "--server"\n        - "--addr=localhost:8080"\n      securityContext:\n        capabilities:\n          add: ["something"]\n          drop: ["must_drop", "another_one"]\n      resources:\n        limits:\n          cpu: "100m"\n          memory: "30Mi"\n\n'})}),(0,n.jsx)(i.p,{children:"Usage"}),(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/capabilities/samples/capabilities-demo/example_allowed.yaml\n"})})]}),(0,n.jsxs)(a,{children:[(0,n.jsx)("summary",{children:"disallowed-ephemeral"}),(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-yaml",children:'apiVersion: v1\nkind: Pod\nmetadata:\n  name: opa-disallowed\n  labels:\n    owner: me.agilebank.demo\nspec:\n  ephemeralContainers:\n    - name: opa\n      image: openpolicyagent/opa:0.9.2\n      args:\n        - "run"\n        - "--server"\n        - "--addr=localhost:8080"\n      securityContext:\n        capabilities:\n          add: ["disallowedcapability"]\n      resources:\n        limits:\n          cpu: "100m"\n          memory: "30Mi"\n\n'})}),(0,n.jsx)(i.p,{children:"Usage"}),(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/capabilities/samples/capabilities-demo/disallowed_ephemeral.yaml\n"})})]})]})]})}function d(e={}){const{wrapper:i}={...(0,t.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},1151:(e,i,a)=>{a.d(i,{Z:()=>o,a:()=>r});var n=a(7294);const t={},s=n.createContext(t);function r(e){const i=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),n.createElement(s.Provider,{value:i},e.children)}}}]);