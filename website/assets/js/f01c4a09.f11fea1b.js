"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1021],{5268:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>d,frontMatter:()=>c,metadata:()=>s,toc:()=>u});var o=t(5893),a=t(1151);const c={id:"automount-serviceaccount-token",title:"Automount Service Account Token for Pod"},i="Automount Service Account Token for Pod",s={id:"validation/automount-serviceaccount-token",title:"Automount Service Account Token for Pod",description:"Description",source:"@site/docs/validation/automount-serviceaccount-token.md",sourceDirName:"validation",slug:"/validation/automount-serviceaccount-token",permalink:"/gatekeeper-library/website/validation/automount-serviceaccount-token",draft:!1,unlisted:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper-library/edit/master/website/docs/validation/automount-serviceaccount-token.md",tags:[],version:"current",frontMatter:{id:"automount-serviceaccount-token",title:"Automount Service Account Token for Pod"},sidebar:"docs",previous:{title:"Allowed Images",permalink:"/gatekeeper-library/website/validation/allowedreposv2"},next:{title:"Block Endpoint Edit Default Role",permalink:"/gatekeeper-library/website/validation/block-endpoint-edit-default-role"}},r={},u=[{value:"Description",id:"description",level:2},{value:"Template",id:"template",level:2},{value:"Usage",id:"usage",level:3},{value:"Examples",id:"examples",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"automount-service-account-token-for-pod",children:"Automount Service Account Token for Pod"}),"\n",(0,o.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"Controls the ability of any Pod to enable automountServiceAccountToken."}),"\n",(0,o.jsx)(n.h2,{id:"template",children:"Template"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8spspautomountserviceaccounttokenpod\n  annotations:\n    metadata.gatekeeper.sh/title: "Automount Service Account Token for Pod"\n    metadata.gatekeeper.sh/version: 1.0.1\n    description: >-\n      Controls the ability of any Pod to enable automountServiceAccountToken.\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sPSPAutomountServiceAccountTokenPod\n      validation:\n        openAPIV3Schema:\n          type: object\n          description: >-\n            Controls the ability of any Pod to enable automountServiceAccountToken.\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8sautomountserviceaccounttoken\n\n        import data.lib.exclude_update.is_update\n\n        violation[{"msg": msg}] {\n            # spec.automountServiceAccountToken and spec.containers.volumeMounts fields are immutable.\n            not is_update(input.review)\n\n            obj := input.review.object\n            mountServiceAccountToken(obj.spec)\n            msg := sprintf("Automounting service account token is disallowed, pod: %v", [obj.metadata.name])\n        }\n\n        mountServiceAccountToken(spec) {\n            spec.automountServiceAccountToken == true\n        }\n\n        # if there is no automountServiceAccountToken spec, check on volumeMount in containers. Service Account token is mounted on /var/run/secrets/kubernetes.io/serviceaccount\n        # https://kubernetes.io/docs/reference/access-authn-authz/service-accounts-admin/#serviceaccount-admission-controller\n        mountServiceAccountToken(spec) {\n            not has_key(spec, "automountServiceAccountToken")\n            "/var/run/secrets/kubernetes.io/serviceaccount" == input_containers[_].volumeMounts[_].mountPath\n        }\n\n        input_containers[c] {\n            c := input.review.object.spec.containers[_]\n        }\n\n        input_containers[c] {\n            c := input.review.object.spec.initContainers[_]\n        }\n\n        # Ephemeral containers not checked as it is not possible to set field.\n\n        has_key(x, k) {\n            _ = x[k]\n        }\n      libs:\n        - |\n          package lib.exclude_update\n\n          is_update(review) {\n              review.operation == "UPDATE"\n          }\n\n'})}),"\n",(0,o.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/automount-serviceaccount-token/template.yaml\n"})}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"automount-serviceaccount-token"}),(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"constraint"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sPSPAutomountServiceAccountTokenPod\nmetadata:\n  name: psp-automount-serviceaccount-token-pod\nspec:\n  match:\n    kinds:\n      - apiGroups: [""]\n        kinds: ["Pod"]\n    excludedNamespaces: ["kube-system"]\n\n'})}),(0,o.jsx)(n.p,{children:"Usage"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/automount-serviceaccount-token/samples/automount-serviceaccount-token/constraint.yaml\n"})})]}),(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"example-allowed"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-automountserviceaccounttoken-allowed\n  labels:\n    app: nginx-not-automountserviceaccounttoken\nspec:\n  automountServiceAccountToken: false\n  containers:\n  - name: nginx\n    image: nginx\n\n"})}),(0,o.jsx)(n.p,{children:"Usage"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/automount-serviceaccount-token/samples/automount-serviceaccount-token/example_allowed.yaml\n"})})]}),(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"example-disallowed"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-automountserviceaccounttoken-disallowed\n  labels:\n    app: nginx-automountserviceaccounttoken\nspec:\n  automountServiceAccountToken: true\n  containers:\n  - name: nginx\n    image: nginx\n\n"})}),(0,o.jsx)(n.p,{children:"Usage"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/automount-serviceaccount-token/samples/automount-serviceaccount-token/example_disallowed.yaml\n"})})]})]})]})}function d(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>i});var o=t(7294);const a={},c=o.createContext(a);function i(e){const n=o.useContext(c);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(c.Provider,{value:n},e.children)}}}]);