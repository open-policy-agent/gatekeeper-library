variables:
- name: namingTranslation
  expression: |
    {
      "Unconfined": "unconfined",
      "Localhost": "localhost",
    }
- name: containers
  expression: 'has(variables.anyObject.spec.containers) ? variables.anyObject.spec.containers : []'
- name: initContainers
  expression: 'has(variables.anyObject.spec.initContainers) ? variables.anyObject.spec.initContainers : []'
- name: ephemeralContainers
  expression: 'has(variables.anyObject.spec.ephemeralContainers) ? variables.anyObject.spec.ephemeralContainers : []'
- name: allowAllProfiles
  expression: |
    has(variables.params.allowedProfiles) && variables.params.allowedProfiles.exists(profile, profile == "*")
- name: exemptImagePrefixes
  expression: |
    !has(variables.params.exemptImages) ? [] :
      variables.params.exemptImages.filter(image, image.endsWith("*")).map(image, string(image).replace("*", ""))
- name: exemptImageExplicit
  expression: |
    !has(variables.params.exemptImages) ? [] : 
      variables.params.exemptImages.filter(image, !image.endsWith("*"))
- name: exemptImages
  expression: |
    (variables.containers + variables.initContainers + variables.ephemeralContainers).filter(container,
      container.image in variables.exemptImageExplicit ||
      variables.exemptImagePrefixes.exists(exemption, string(container.image).startsWith(exemption)))
- name: unverifiedContainers
  expression: |
    (variables.containers + variables.initContainers + variables.ephemeralContainers).filter(container,
      !variables.allowAllProfiles &&
      !(container.image in variables.exemptImages))
- name: inputAllowedProfiles
  expression: |
    !has(variables.params.allowedProfiles) ? [] : variables.params.allowedProfiles
- name: allowedLocalhostFiles
  expression: |
    has(variables.params.allowedLocalhostFiles) ? variables.params.allowedLocalhostFiles : []
- name: translatedProfiles
  expression: |
    !has(variables.params.allowedProfiles) ? [] :
      (
        (variables.params.allowedProfiles.filter(profile,
        !profile.lowerAscii().startsWith("localhost")).map(profile, (profile in variables.namingTranslation) ? variables.namingTranslation[profile] : profile).filter(profile, !(profile in variables.inputAllowedProfiles))) + 
        (variables.params.allowedProfiles.exists(profile, profile == "RuntimeDefault") ? ["runtime/default", "docker/default"] : []) +
        (variables.params.allowedProfiles.exists(profile, profile == "Localhost") ? variables.allowedLocalhostFiles.map(file, "localhost/" + file) : [])
      )        
- name: allowedProfiles
  expression: |
    variables.inputAllowedProfiles + variables.translatedProfiles.filter(profile, !(profile in variables.inputAllowedProfiles))
- name: hasPodSecurityContext
  expression: |
    has(variables.anyObject.spec.securityContext) && has(variables.anyObject.spec.securityContext.seccompProfile)
- name: hasPodAnnotations
  expression: |
    has(variables.anyObject.metadata.annotations) && ("seccomp.security.alpha.kubernetes.io/pod" in variables.anyObject.metadata.annotations)
- name: podAnnotationsProfiles
  expression: |
    variables.unverifiedContainers.filter(container, 
      variables.params.allowAnnotations &&
      !(has(container.securityContext) && has(container.securityContext.seccompProfile)) && 
      !(has(variables.anyObject.metadata.annotations) && (("container.seccomp.security.alpha.kubernetes.io/" + container.name) in variables.anyObject.metadata.annotations)) && 
      !variables.hasPodSecurityContext && 
      variables.hasPodAnnotations 
    ).map(container, {
      "container" : container.name,
      "profile" : variables.anyObject.metadata.annotations["seccomp.security.alpha.kubernetes.io/pod"],
      "file" : dyn(""),
      "location" : dyn("annotation seccomp.security.alpha.kubernetes.io/pod"),
    })
- name: containerAnnotationsProfiles
  expression: |
    variables.unverifiedContainers.filter(container, 
      variables.params.allowAnnotations &&
      !(has(container.securityContext) && has(container.securityContext.seccompProfile)) && 
      !variables.hasPodSecurityContext && 
      has(variables.anyObject.metadata.annotations) && (("container.seccomp.security.alpha.kubernetes.io/" + container.name) in variables.anyObject.metadata.annotations)
    ).map(container, {
      "container" : container.name,
      "profile" : variables.anyObject.metadata.annotations["container.seccomp.security.alpha.kubernetes.io/" + container.name],
      "file" : dyn(""),
      "location" : dyn("annotation container.seccomp.security.alpha.kubernetes.io/" + container.name),
    })
- name: podLocalHostProfile
  expression: |
    has(variables.anyObject.spec.securityContext) && has(variables.anyObject.spec.securityContext.seccompProfile) && has(variables.anyObject.spec.securityContext.seccompProfile.localhostProfile) ? variables.anyObject.spec.securityContext.seccompProfile.localhostProfile : ""
- name: canonicalPodSecurityContextProfile
  expression: |
    has(variables.hasPodSecurityContext) && has(variables.anyObject.spec.securityContext.seccompProfile.type) ? 
      (variables.anyObject.spec.securityContext.seccompProfile.type == "RuntimeDefault" ? "runtime/default" : 
      variables.anyObject.spec.securityContext.seccompProfile.type == "Unconfined" ? "unconfined" : variables.anyObject.spec.securityContext.seccompProfile.type == "Loclhost" ? "localhost" : variables.anyObject.spec.securityContext.seccompProfile.type)
      : ""
- name: podSecurityContextProfiles
  expression: |
    variables.unverifiedContainers.filter(container, 
      !(has(container.securityContext) && has(container.securityContext.seccompProfile)) && 
      variables.hasPodSecurityContext
    ).map(container, {
      "container" : container.name,
      "profile" : variables.canonicalPodSecurityContextProfile,
      "file" : variables.podLocalHostProfile,
      "location" : dyn("pod securityContext"),
    })
- name: containerSecurityContextProfiles
  expression: |
    variables.unverifiedContainers.filter(container, 
      has(container.securityContext) && has(container.securityContext.seccompProfile)
    ).map(container, {
      "container" : container.name,
      "profile" : has(container.securityContext.seccompProfile.type) ? (container.securityContext.seccompProfile.type == "RuntimeDefault" ? "runtime/default" : 
      container.securityContext.seccompProfile.type == "Unconfined" ? "unconfined" : container.securityContext.seccompProfile.type == "Loclhost" ? "localhost" : container.securityContext.seccompProfile.type)
      : "" ,
      "file" : has(container.securityContext.seccompProfile.localhostProfile) ? container.securityContext.seccompProfile.localhostProfile : dyn(""),
      "location" : dyn("container securityContext"),
    })
- name: containerProfilesMissing
  expression: |
    variables.unverifiedContainers.filter(container, 
      !(has(container.securityContext) && has(container.securityContext.seccompProfile)) && 
      !variables.hasPodSecurityContext && 
      ((!variables.params.allowAnnotations) ||
      !(has(variables.anyObject.metadata.annotations) && (("container.seccomp.security.alpha.kubernetes.io/" + container.name) in variables.anyObject.metadata.annotations)) && 
      !variables.hasPodAnnotations)
    ).map(container, {
      "container" : container.name,
      "profile" : dyn("not configured"),
      "file" : dyn(""),
      "location" : dyn("no explicit profile found"),
    })
- name: allBadContainerProfiles
  expression: |
    variables.podAnnotationsProfiles + variables.containerAnnotationsProfiles + variables.podSecurityContextProfiles + variables.containerSecurityContextProfiles + variables.containerProfilesMissing
- name: allowAllLocalhostFiles
  expression: |
    has(variables.params.allowedLocalhostFiles) ? variables.params.allowedLocalhostFiles.exists(file, file == "*") : 
      has(variables.params.allowedProfiles) ? variables.params.allowedProfiles.exists(profile, profile == "localhost/*") : false
- name: allowedFiles
  expression: |
    has(variables.params.allowedLocalhostFiles) ? variables.params.allowedLocalhostFiles : [] +
    variables.inputAllowedProfiles.filter(profile, profile.startsWith("localhost/")).map(profile, profile.replace("localhost/", ""))
- name: containersWithAllowedProfiles
  expression: |
    variables.allBadContainerProfiles.filter(badContainerProfile, 
      variables.allowAllProfiles || 
      (
        !badContainerProfile.profile.lowerAscii().startsWith("localhost") && 
        variables.allowedProfiles.exists(allowedProfile, allowedProfile == badContainerProfile.profile)
      ) ||
      (
        badContainerProfile.profile == "Localhost" &&
        !variables.allowAllLocalhostFiles &&
        variables.allowedProfiles.exists(allowedProfile, allowedProfile == badContainerProfile.profile) &&
        variables.allowedFiles.exists(file, file == badContainerProfile.file)
      ) ||
      (
        badContainerProfile.profile == "Localhost" &&
        variables.allowAllLocalhostFiles &&
        variables.allowedProfiles.exists(allowedProfile, allowedProfile == badContainerProfile.profile)
      ) || 
      (
        variables.allowedProfiles.exists(allowedProfile, allowedProfile == "localhost/*") &&
        badContainerProfile.profile.startsWith("localhost/")
      ) ||
      (
        badContainerProfile.profile.startsWith("localhost/") &&
        variables.allowedProfiles.exists(allowedProfile, allowedProfile == badContainerProfile.profile)
      ) 
    ).map(profile, profile.container)
- name: badContainerProfilesWithoutFiles
  expression: |
    variables.allBadContainerProfiles.filter(badContainerProfile, 
      !variables.containersWithAllowedProfiles.exists(container, container == badContainerProfile.container) &&
      badContainerProfile.profile != "Localhost"
    ).map(badProfile, "Seccomp profile '" + badProfile.profile + "' is not allowed for container '" + badProfile.container + "'. Found at: " + badProfile.location + ". Allowed profiles: " + variables.allowedProfiles.join(", "))
- name: badContainerProfilesWithFiles
  expression: |
    variables.allBadContainerProfiles.filter(badContainerProfile, 
      !variables.containersWithAllowedProfiles.exists(container, container == badContainerProfile.container) &&
      badContainerProfile.profile == "Localhost"
    ).map(badProfile, "Seccomp profile '" + badProfile.profile + "' With file '" + badProfile.file + "' is not allowed for container '" + badProfile.container + "'. Found at: " + badProfile.location + ". Allowed profiles: " + variables.allowedProfiles.join(", "))
validations:
- expression: 'size(variables.badContainerProfilesWithoutFiles) == 0'
  messageExpression: |
    variables.badContainerProfilesWithoutFiles.join("\n")
- expression: 'size(variables.badContainerProfilesWithFiles) == 0'
  messageExpression: |
    variables.badContainerProfilesWithFiles.join("\n")