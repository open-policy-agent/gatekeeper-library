variables:
- name: containers
  expression: 'has(variables.anyObject.spec.containers) ? variables.anyObject.spec.containers : []'
- name: initContainers
  expression: 'has(variables.anyObject.spec.initContainers) ? variables.anyObject.spec.initContainers : []'
- name: ephemeralContainers
  expression: 'has(variables.anyObject.spec.ephemeralContainers) ? variables.anyObject.spec.ephemeralContainers : []'
- name: allContainers
  expression: 'variables.containers + variables.initContainers + variables.ephemeralContainers'
- name: exemptImagePrefixes
  expression: |
    !has(variables.params.exemptImages) ? [] :
      variables.params.exemptImages.filter(image, image.endsWith("*")).map(image, string(image).replace("*", ""))
- name: exemptImageExplicit
  expression: |
    !has(variables.params.exemptImages) ? [] : 
      variables.params.exemptImages.filter(image, !image.endsWith("*"))
- name: exemptImages
  expression: |
    (variables.containers + variables.initContainers + variables.ephemeralContainers).filter(container,
      container.image in variables.exemptImageExplicit ||
      variables.exemptImagePrefixes.exists(exemption, string(container.image).startsWith(exemption))
    ).map(container, container.image)
- name: allowedCapabilities
  expression: 'has(variables.params.allowedCapabilities) ? variables.params.allowedCapabilities : []'
- name: allCapabilitiesAllowed
  expression: '"*" in variables.allowedCapabilities'
- name: disallowedCapabilitiesByContainer
  expression: |
    variables.allContainers.map(container, !(container.image in variables.exemptImages) &&
      !variables.allCapabilitiesAllowed && has(container.securityContext) && has(container.securityContext.capabilities) && has(container.securityContext.capabilities.add) &&
        container.securityContext.capabilities.add.exists(capability, !(capability in variables.allowedCapabilities)),
      [container.name, dyn(container.securityContext.capabilities.add.filter(capability, !(capability in variables.allowedCapabilities)).join(", "))]
    )
- name: requiredDropCapabilities
  expression: 'has(variables.params.requiredDropCapabilities) ? variables.params.requiredDropCapabilities : []'
- name: missingDropCapabilitiesByContainer
  expression: |
    variables.allContainers.map(container, !(container.image in variables.exemptImages) &&
      size(variables.requiredDropCapabilities) > 0 && (
        !has(container.securityContext) || !has(container.securityContext.capabilities) || !has(container.securityContext.capabilities.drop) || (
          !("all" in container.securityContext.capabilities.drop) &&
          variables.requiredDropCapabilities.exists(capability, !(capability in container.securityContext.capabilities.drop))
        )
      ),
      [container.name, 
        !has(container.securityContext) ? variables.requiredDropCapabilities :
          !has(container.securityContext.capabilities) ? variables.requiredDropCapabilities :
            !has(container.securityContext.capabilities.drop) ? variables.requiredDropCapabilities : 
              variables.requiredDropCapabilities.filter(capability, !(capability in container.securityContext.capabilities.drop))
      ]
    )
validations:
- expression: '(has(request.operation) && request.operation == "UPDATE") || size(variables.disallowedCapabilitiesByContainer) == 0'
  messageExpression: |
    "containers have disallowed capabilities: " + variables.disallowedCapabilitiesByContainer.map(pair, "{container: " + pair[0] + ", capabilities: [" + pair[1] + "]}").join(", ")
- expression: '(has(request.operation) && request.operation == "UPDATE") || size(variables.missingDropCapabilitiesByContainer) == 0'
  messageExpression: |
    "containers are not dropping all required capabilities: " + variables.missingDropCapabilitiesByContainer.map(pair, "{container: " + pair[0] + ", capabilities: [" + pair[1].join(", ") + "]}").join(", ")