matchConditions:
- name: "apply-to-pod"
  expression: 'variables.anyObject.kind == "Pod"'
variables:
- name: containers
  expression: 'has(variables.anyObject.spec.containers) ? variables.anyObject.spec.containers : []'
- name: initContainers
  expression: 'has(variables.anyObject.spec.initContainers) ? variables.anyObject.spec.initContainers : []'
- name: ephemeralContainers
  expression: 'has(variables.anyObject.spec.ephemeralContainers) ? variables.anyObject.spec.ephemeralContainers : []'
- name: exemptImagePrefixes
  expression: |
    !has(variables.params.exemptImages) ? [] :
      variables.params.exemptImages.filter(image, image.endsWith("*")).map(image, string(image).replace("*", ""))
- name: exemptImageExplicit
  expression: |
    !has(variables.params.exemptImages) ? [] : 
      variables.params.exemptImages.filter(image, !image.endsWith("*"))
- name: exemptImages
  expression: |
    (variables.containers + variables.initContainers + variables.ephemeralContainers).filter(container,
      container.image in variables.exemptImageExplicit ||
      variables.exemptImagePrefixes.exists(exemption, string(container.image).startsWith(exemption))).map(container, container.image)
- name: podRunAsUser
  expression: |
    has(variables.anyObject.spec.securityContext) && has(variables.anyObject.spec.securityContext.runAsUser) ? variables.anyObject.spec.securityContext.runAsUser : null
- name: podSupplementalGroups
  expression: |
    has(variables.anyObject.spec.securityContext) && has(variables.anyObject.spec.securityContext.supplementalGroups) ? variables.anyObject.spec.securityContext.supplementalGroups : null
- name: podRunAsGroup
  expression: |
    has(variables.anyObject.spec.securityContext) && has(variables.anyObject.spec.securityContext.runAsGroup) ? variables.anyObject.spec.securityContext.runAsGroup : null
- name: podFsGroup
  expression: |
    has(variables.anyObject.spec.securityContext) && has(variables.anyObject.spec.securityContext.fsGroup) ? variables.anyObject.spec.securityContext.fsGroup : null
- name: nonExemptContainers
  expression: |
    (variables.containers + variables.initContainers + variables.ephemeralContainers).filter(container, !(container.image in variables.exemptImages))
- name: missingRunAsNonRootGlobal
  expression: |
    !has(variables.anyObject.securityContext) || ((!has(variables.anyObject.securityContext.runAsNonRoot) || 
    !variables.anyObject.securityContext.runAsNonRoot) && (!has(variables.anyObject.securityContext.runAsUser) || 
    variables.anyObject.securityContext.runAsUser == 0))
- name: violatingMustOrMayRunAsUser
  expression: |
    has(variables.params.runAsUser) && has(variables.params.runAsUser.rule) && variables.params.runAsUser.rule == "MustRunAs" ? 
      variables.nonExemptContainers.filter(container, 
        (!has(container.securityContext) || !has(container.securityContext.runAsUser)) && variables.podRunAsUser == null
      ).map(container, "Container " + container.name + " is attempting to run without a required securityContext/runAsUser") + 
      variables.nonExemptContainers.filter(container, 
        (has(container.securityContext) && has(container.securityContext.runAsUser) ? 
          !variables.params.runAsUser.ranges.exists(range, 
            container.securityContext.runAsUser >= range.min && container.securityContext.runAsUser <= range.max) : 
          variables.podRunAsUser != null && !variables.params.runAsUser.ranges.exists(range, 
            variables.podRunAsUser >= range.min && variables.podRunAsUser <= range.max)
        )
      ).map(container, 
        "Container " + container.name + " is attempting to run as disallowed user. Allowed runAsUser: {ranges: [" + 
        variables.params.runAsUser.ranges.map(range, "{max: " + string(range.max) + ", min: " + string(range.min) + "}").join(", ") + 
        ", rule: " + variables.params.runAsUser.rule + "}"
      ) : 
      []
- name: violatingMustOrMayRunAsGroup
  expression: |
    has(variables.params.runAsGroup) && has(variables.params.runAsGroup.rule) && (variables.params.runAsGroup.rule == "MustRunAs" || variables.params.runAsGroup.rule == "MayRunAs") ? 
      variables.nonExemptContainers.filter(container, 
        (!has(container.securityContext) || !has(container.securityContext.runAsGroup)) && variables.podRunAsGroup == null
      ).map(container, 
        "Container " + container.name + " is attempting to run without a required securityContext/runAsGroup. Allowed runAsGroup: {ranges: [" + 
        variables.params.runAsGroup.ranges.map(range, "{max: " + string(range.max) + ", min: " + string(range.min) + "}").join(", ") + ", rule: " + 
        variables.params.runAsGroup.rule + "}"
      ) + 
      variables.nonExemptContainers.filter(container, 
        (has(container.securityContext) && has(container.securityContext.runAsGroup)) ? 
          !variables.params.runAsGroup.ranges.exists(range, 
            container.securityContext.runAsGroup >= range.min && container.securityContext.runAsGroup <= range.max) : 
          variables.podRunAsGroup != null && !variables.params.runAsGroup.ranges.exists(range, 
            variables.podRunAsGroup >= range.min && variables.podRunAsGroup <= range.max)
      ).map(container, 
        "Container " + container.name + " is attempting to run as disallowed group. Allowed runAsGroup: {ranges: [" + 
        variables.params.runAsGroup.ranges.map(range, "{max: " + string(range.max) + ", min: " + string(range.min) + "}").join(", ") + 
        ", rule: " + variables.params.runAsGroup.rule + "}"
      ) : 
      []
- name: violatingMustOrMayRunAsFsGroup
  expression: |
    has(variables.params.fsGroup) && has(variables.params.fsGroup.rule) && (variables.params.fsGroup.rule == "MustRunAs" || variables.params.fsGroup.rule == "MayRunAs" ) ? 
      variables.nonExemptContainers.filter(container, 
        (!has(container.securityContext) || !has(container.securityContext.fsGroup)) && variables.podFsGroup == null
      ).map(container, 
        "Container " + container.name + " is attempting to run without a required securityContext/fsGroup. Allowed fsGroup: {ranges: [" + 
        variables.params.fsGroup.ranges.map(range, "{max: " + string(range.max) + ", min: " + string(range.min) + "}").join(", ") + 
        ", rule: " + variables.params.fsGroup.rule + "}"
      ) + 
      variables.nonExemptContainers.filter(container, (has(container.securityContext) && has(container.securityContext.fsGroup)) ? 
        !variables.params.fsGroup.ranges.exists(range, 
          container.securityContext.fsGroup >= range.min && container.securityContext.fsGroup <= range.max) : 
        variables.podFsGroup != null && !variables.params.fsGroup.ranges.exists(range, 
          variables.podFsGroup >= range.min && variables.podFsGroup <= range.max)
      ).map(container, "Container " + container.name + " is attempting to run as disallowed fsGroup. Allowed fsGroup: {ranges: [" + 
        variables.params.fsGroup.ranges.map(range, "{max: " + string(range.max) + ", min: " + string(range.min) + "}").join(", ") + 
        ", rule: " + variables.params.fsGroup.rule + "}") 
      : []
- name: violatingMustOrMayRunAsSupplementalGroups
  expression: |
    has(variables.params.supplementalGroups) && has(variables.params.supplementalGroups.rule) && (variables.params.supplementalGroups.rule == "MustRunAs" || variables.params.supplementalGroups.rule == "MayRunAs") ? 
      variables.nonExemptContainers.filter(container, 
        (!has(container.securityContext) || !has(container.securityContext.supplementalGroups)) && variables.podSupplementalGroups == null
      ).map(container, 
        "Container " + container.name + " is attempting to run without a required securityContext/supplementalGroups. Allowed supplementalGroups: {ranges: [" + 
        variables.params.supplementalGroups.ranges.map(range, "{max: " + string(range.max) + ", min: " + string(range.min) + "}").join(", ") + 
        ", rule: " + variables.params.supplementalGroups.rule + "}"
      ) + 
      variables.nonExemptContainers.filter(container, 
        (has(container.securityContext) && has(container.securityContext.supplementalGroups)) ? 
          !variables.params.supplementalGroups.ranges.exists(range, 
            container.securityContext.supplementalGroups.all(gp, gp >= range.min && gp <= range.max)) : 
          variables.podSupplementalGroups != null && !variables.params.supplementalGroups.ranges.exists(range, 
            variables.podSupplementalGroups.all(gp, gp >= range.min && gp <= range.max))
      ).map(container, 
        "Container " + container.name + " is attempting to run with disallowed supplementalGroups. Allowed supplementalGroups: {ranges: [" + 
        variables.params.supplementalGroups.ranges.map(range, "{max: " + string(range.max) + ", min: " + string(range.min) + "}").join(", ") + 
        ", rule: " + variables.params.supplementalGroups.rule + "}") 
      : []
- name: violatingMustRunAsNonRoot
  expression: |
    variables.nonExemptContainers.filter(container, 
      (has(variables.params.runAsUser) && has(variables.params.runAsUser.rule) && variables.params.runAsUser.rule == "MustRunAsNonRoot") && 
      (!has(container.securityContext) || (!has(container.securityContext.runAsNonRoot) || !container.securityContext.runAsNonRoot) && 
      (!has(container.securityContext.runAsUser) || container.securityContext.runAsUser == 0)) && variables.missingRunAsNonRootGlobal
    ).map(container, 
      "Container " + container.name + " is attempting to run without a required securityContext/runAsNonRoot or securityContext/runAsUser != 0")
- name: violations
  expression: |
    variables.violatingMustRunAsNonRoot + 
    variables.violatingMustOrMayRunAsUser + 
    variables.violatingMustOrMayRunAsGroup + 
    variables.violatingMustOrMayRunAsFsGroup + 
    variables.violatingMustOrMayRunAsSupplementalGroups
validations:
- expression: '(has(request.operation) && request.operation == "UPDATE") || size(variables.violations) == 0'
  messageExpression: 'variables.violations.join(", ")'